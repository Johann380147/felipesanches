<?xml version="1.0"?>
<bindings
	xmlns="http://www.mozilla.org/xbl" 
	xmlns:xbl="http://www.mozilla.org/xbl" 
	xmlns:html="http://www.w3.org/1999/xhtml" 
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:svg="http://www.w3.org/2000/svg" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
>
	<binding id="annotation">
		<implementation>
			<field name="balloon"/>
			<field name="highlight"/>
			<field name="textrect"/>
			<property name="disabled">
				<getter>
	        <![CDATA[
	        return this.getAttribute('disabled') == 'true';
	        ]]>
				</getter>
				<setter>
	        <![CDATA[
          	if (val) {
	          	this.setAttribute('disabled', 'true');
          	}
          	else {
          		this.removeAttribute('disabled');
          	}
	        return val;
	        ]]>
				</setter>
			</property>
			<property name="label">
				<setter>
	        <![CDATA[
	        this.setText(val);
	        this.setAttribute("label", val);
	        return val;
	        ]]>
				</setter>
			</property>
			<constructor>
	<![CDATA[
	alert("annotations XBL constructed");
	const STROKE_WIDTH = 4;
	const CORNER_RADIUS = 0;
	
	this.type = this.getAttribute("type");
	if (!this.type) this.type = "textrect";
	
	this.svg_shape_corner = parseInt(this.getAttribute("radius"));
	if (isNaN(this.svg_shape_corner)) this.svg_shape_corner = CORNER_RADIUS;
	
	//This should not be necessary, but unfortunately getting the value
	//from the stylesheet programmatically is not possible in current builds
	
	this.svg_shape_stroke = parseInt(this.getAttribute("stroke-width"));
	if (isNaN(this.svg_shape_stroke)) this.svg_shape_stroke = STROKE_WIDTH;

	var my_this = this;
	
	this.svg_shape_box = document.getAnonymousElementByAttribute(this, "anonid", "svg-shape-box");
	this.rect = document.getAnonymousElementByAttribute(this, "anonid", "svg-shape-rect");
	this.text = document.getAnonymousElementByAttribute(this, "anonid", "svg-shape-text");
	this.path = document.getAnonymousElementByAttribute(this, "anonid", "svg-shape-path");
	
	my_func = function myFunction(){ my_this.doLayout();}
	window.addEventListener("load", my_func, true);

	]]>
			</constructor>
			<method name="doLayout">
				<body>
	<![CDATA[

	var box_w = this.boxObject.width;
	var box_h = this.boxObject.height;
	var cx = box_w / 2;
	var cy = box_h / 2;
			
	var stroke_w = this.svg_shape_stroke;
		
	this.svg_shape_box.setAttribute("width", box_w);
	this.svg_shape_box.setAttribute("height", box_h);
		
	if (this.type == "balloon") {

    var x,y,w,h,px,py, description;

    x = this.getAttribute("x")*box_w/100;
		y = this.getAttribute("y")*box_h/100;
		w = this.getAttribute("w")*box_w/100;
		h = this.getAttribute("h")*box_h/100;
    px = this.getAttribute("px")*box_w/100;
		py = this.getAttribute("py")*box_h/100;

  	var text_w = this.text.getComputedTextLength();	
    var text_h = document.defaultView.getComputedStyle(this.text, "").getPropertyCSSValue("font-size").getFloatValue(CSSPrimitiveValue.CSS_PX);
    
    base_coords = function(point, p0, length){
      if (point > p0 + length/2){
        base0 = 4*length/6;
        base1 = 5*length/6;
      }else{
        base0 = 1*length/6;
        base1 = 2*length/6;
      }
      return [base0, base1];
    }

    coord = function(x,y){
        return x + "," + y + " ";
    }

    //begin drawing the balloon at the top left corner
    description = "M " + coord(x,y);

    //top side of the balloon
    if (py<y &&
        ( (px-(x+w)) < (y-py) ) &&
        ( (x-px) < (y-py) )){
        //if arrow is rendered at this side of the balloon:
        base = base_coords(px, x, w);
        description += coord(x+base[0],y);
        description += coord(px,py);
        description += coord(x+base[1],y);
    }
    description += coord(x+w,y);

    //right side of the balloon
    if (px>x+w &&
        ((py-(y+h)) < (px-(x+w))) &&
        ((y-py)<(px-(x+w)))){
        //if arrow is rendered at this side of the balloon:
        base = base_coords(py, y, h);
        description += coord(x+w,y+base[0]);
        description += coord(px,py);
        description += coord(x+w,y+base[1]);
    }
    description += coord(x+w,y+h);

    //bottom side of the balloon
    if (py>y+h &&
        ((x-px) < (py-(y+h))) &&
        ((px-(x+w))<(py-(y+h)))){
        //if arrow is rendered at this side of the balloon:
        base = base_coords(px, x, w);
        description += coord(x+base[1],y+h);
        description += coord(px,py);
        description += coord(x+base[0],y+h);
    }
    description += coord(x,y+h);

    //left side of the balloon
    if (px<x &&
        ((py-(y+h)) < (x-px)) &&
        ((y-py)<(x-px))){
        //if arrow is rendered at this side of the balloon:
        base = base_coords(py, y, h);
        description += coord(x,y+base[1]);
        description += coord(px,py);
        description += coord(x,y+base[0]);
    }

    //close the path:
    description += "z";

		this.path.setAttribute("d", description);
		this.text.setAttribute("x", x + w/2 - text_w/2);
		this.text.setAttribute("y", y + h/2); // -text_h/2 ?

		this.rect.setAttribute("style", "display: none");

  } else if (this.type == "highlight"){


		this.path.setAttribute("style", "display: none");

  } else if (this.type == "textrect"){

		this.rect.setAttribute("x", this.getAttribute("x")*box_w/100);
		this.rect.setAttribute("y", this.getAttribute("y")*box_h/100);
		this.rect.setAttribute("width", this.getAttribute("w")*box_w/100);
		this.rect.setAttribute("height", this.getAttribute("h")*box_h/100);
		this.rect.setAttribute("rx", this.svg_shape_corner);
		this.rect.setAttribute("ry", this.svg_shape_corner);
	}

	this.setText(this.getAttribute("label"));

	]]>
				</body>
			</method>
			<method name="setText">
				<parameter name="text" /> 
				<body>
	<![CDATA[
	
	if (!text) text = "";
	this.text.firstChild.nodeValue = text;

	]]>
				</body>
			</method>
			<method name="setPointer">
				<parameter name="px" />
				<parameter name="py" /> 
				<body>
	<![CDATA[
	
	if (!px) px = "0";
	if (!py) py = px;

	this.setAttribute("px", px);
	this.setAttribute("py", py);
  this.doLayout();

	]]>
				</body>
			</method>
      <method name="setDimensions">
				<parameter name="x" />
				<parameter name="y" /> 
				<parameter name="w" /> 
				<parameter name="h" /> 
				<body>
	<![CDATA[
	
	if (!x) x = 0;
	if (!y) y = x;
	if (!w) w = 100;
	if (!h) h = w;

	this.setAttribute("x", x);
	this.setAttribute("y", y);
	this.setAttribute("w", w);
	this.setAttribute("h", h);
  this.doLayout();

	]]>
				</body>
			</method>
		</implementation>
		<resources>
			<stylesheet src="chrome://wikisubs/skin/annotations.css"/>
		</resources>
		<content>
			<xul:hbox class="box-inherit" xbl:inherits="align,dir,pack,orient" align="center" pack="center" flex="1">
				<svg:svg anonid="svg-shape-box" width="10px" height="10px">
					<svg:g>
						<svg:rect anonid="svg-shape-rect" class="svg-shape-rect" x="2" y="2" width="10" height="10" rx="8" ry="8"/>
						<svg:path anonid="svg-shape-path" class="svg-shape-path"/>
						<svg:text anonid="svg-shape-text" x="0" y="0" class="svg-shape-text">Text</svg:text>
					</svg:g>
				</svg:svg>
			</xul:hbox>
		</content>
	</binding>
</bindings>

