; Copyright (C) 1997-1999 by Soeren Gust, sgust@ithh.informationstheater.de
; Copyright (C) 2010 by Felipe CorrÃªa da Sanches, juca@members.fsf.org

; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

	cpu	8048

sat_time equ 024h

	org	400h

    include	"bitfuncs.inc"	
	include	"g7000.h"

	jmp	selectgame	; RESET
	jmp	irq		; interrupt
	jmp	timer		; timer
	jmp	vsyncirq	; VSYNC-interrupt
	jmp	start		; after selectgame
	jmp	soundirq	; sound-interrupt

timer	retr			; we don't need timer

start
	call	gfxoff

;define shapes for the sprites:

    mov r0,#vdc_spr0_shape
    mov a,#0; use shape #0
    call setshp

    mov a,#1; use shape #1
    call setshp

    mov a,#2; use shape #2
    call setshp

    mov a,#3; use shape #3
    call setshp

    mov r1,#0

main_loop

; play an explosion whenever the fire button is pressed.
        call    getjoystick     ; get offsets
        cpl     F0
        jf0     nofire          ; skip next part
                                ; if not fire

        ; start playing the built-in tune for "explode"
        ; the rest is done by the irq routines in ROM
        mov     a,#tune_explode
        call    playsound
nofire

; read time parameter into R1:
	mov r0,#sat_time
	mov a,@r0
	mov r1,a

;define positioning of sprite:
	call	gfxoff

	mov	r0,#vdc_spr1_ctrl
	mov a,r1
	anl a, #03fh
	add	a,#lo(cos_table)
	movp a,@a ;cos(2*pi*t/64)*128 + 128
	;sub a, #128
	anl a, #0f8h
	;rr a
	rr a
	add a, #20

	movx	@r0,a ;y=20+cos(2*pi*t/64)*32
	inc	r0

    mov a,r1
	add a,#010h ; shift 90 degrees (256 = 360 degrees)
	anl a, #03fh
	add	a,#lo(cos_table)
	movp a,@a ;sin(2*pi*t/64)*128 + 128
	;sub a, #128
	anl a, #0f8h
	;rr a
	rr a
	add a, #20
	movx	@r0,a ;x=20+sin(2*pi*t/64)*32

	inc	r0
    mov a,#(6*8) ;color #6. TODO: check whether this is correct!
	movx	@r0,a ;color

	call	gfxon

	; vx=1
	inc r1

;save time parameter for satellite animation
	mov r0, #sat_time
	mov a, r1
	mov @r0,a

    call waitvsync
    jmp main_loop

; Input
;  A shape to set
;  R0 target sprite
; Alters
;  R2 ROM pointer
;  R7 loop counter
setshp	section setshape
	rl	a
	rl	a
	rl	a
	add	a,#lo(shapedata)
	mov	r2,a
	mov	r7,#8
.loop	mov	a,r2
	movp	a,@a
	movx	@r0,a
	inc	r0
	inc	r2
	djnz	r7,.loop
    ret
	endsection setshape

shapedata
	; 0-3: satellite
	include	"satellite.i"

cos_table
	include	"cos_table.inc"

