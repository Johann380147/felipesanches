<?xml version="1.0"?>

<bindings id="wikisubsBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl"
	 xmlns:svg="http://www.w3.org/2000/svg" 
   xmlns:html="http://www.w3.org/1999/xhtml" 
>

<!--
/*
          This XML binding extends the video controls for html5 video and
           creates a collaborative subtitle user interface. The primary wiki repository is
           http://www.wstr.org/subs/

          While implementing this, I have noticed that part of the functionality could be incorporated
           into a future version of Firefox while other things should remain as optional features
           to be installed in an addon.

          For instance, while the wiki features fit better in an addon, Firefox actually needs a 
           user interface for subtitles selection and display because some ogg videos might have
           subtitles embedded in it:
           
           https://bugzilla.mozilla.org/show_bug.cgi?id=481529 
           Bug 481529 -  Support for Kate overlay streams in <video> tag  

           During the development of this addon I have refactored portions of it and I have provided
           some patches to Firefox. User ogg.k.ogg.k@googlemail.com has merged my patch
           with his own and we've got a prototype ui for managing subtitles embedded in ogg.

           Here is the bug where the refactored version of this addon has been first published
           as a patch:

           https://bugzilla.mozilla.org/show_bug.cgi?id=515898
           Bug 515898 -  implement UI for subtitles on html5 video/audio
*/
-->

  <binding id="subtitlesmenu">
    <content>
      <xul:button class="subtitlesButton" type="menu" position="before_end" dir="reverse" hidden="true">
        <xul:menupopup class="subtitlesMenu" />
      </xul:button>
    </content>

    <implementation>
      <field name="subtitlesMenuUtils">
          <![CDATA[ ({
                init : function(binding){
                    var self=this;

                    //TODO: ugly! 
                    this.video = binding.parentNode.parentNode.parentNode.parentNode.parentNode;
                    this.communication_element = document.createElement("WikiSubsCommunicationElement");
                    this.video.appendChild(this.communication_element);

                    this.subtitlesMenu = document.getAnonymousElementByAttribute(binding, "class", "subtitlesMenu");
                    this.subtitlesButton = document.getAnonymousElementByAttribute(binding, "class", "subtitlesButton");
                    this.addMenuLink("Subtitles wiki page...", "http://www.wstr.org/subs/");

                    for (i in this.video.childNodes){
                      var node = this.video.childNodes[i];
                      if (node.tagName == "ITEXT"){
                          this.addSubtitle({"title": node.id,
                            "lang": node.getAttribute("lang"),
                             "url": node.getAttribute("src"),
                              "itext_node": node });
                          this.subtitlesButton.setAttribute("hidden", "false");
                      }
                    }

                    this.video.addEventListener("DOMNodeInserted", function(event) { self.videoChildInserted(event); }, false);

                    //TODO: Why?!
                    //self.video.addEventListener("load", function(){ self.look_for_available_subtitles(); }, false);
                    window.setInterval ( function(){ self.look_for_available_subtitles(); } );

                },

                addMenuCallback : function (title, callback){
                    var xulns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                    var item = document.createElementNS(xulns, "menuitem");
                    item.setAttribute("label", title);
                    item.addEventListener("click", callback, false);
                    this.subtitlesMenu.appendChild(item);
                },

                /* This will add an option in the subtitles menu that will open a new tab and let the
                 user interact directly with the subtitles wiki repository */
                addMenuLink : function (title, url){
                  var self=this;
                  this.addMenuCallback(title, function(e) {
                    self.communication_element.setAttribute("url", url); 
                    self.emit_event("WikiSubsOpenTab", self.communication_element);
                  }, false);
                },

/*
Silvia Pfeiffer is working on video accessibility on Mozilla. She is drafting a proposal to
W3C and WHATWG to incorporate subtitling/closed captioning markup in the HTML5 spec.
 Her work suggests that itext DOM nodes could be added as video element child nodes
 in order to reference external subtitling/closed captining resources.

 I decided to emulate the proposed behaviour in my addon so that it would be easier to refactor it
in the future in case her proposal gets accepted and incorporated into the standard.
*/
                addSubtitle : function (sub){
                    var xulns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                    var item = document.createElementNS(xulns, "menuitem");
                    item.setAttribute("label", sub["title"]);

                    var self = this;
                    sub["itext_node"].addEventListener("DOMNodeInserted", function(event) { self.itextChildInserted(event); }, false);
                    item.addEventListener("click", function(e) {self.editor.fetch(sub, sub["itext_node"]);}, false);
                    this.subtitlesMenu.appendChild(item);
                    this.subtitlesButton.setAttribute("hidden", "false");
                },

                /*this will ask the wiki repository for a list of subtitles that match the current video:*/
                look_for_available_subtitles : function(){
                    this.emit_event("WikiSubsLoadSubList", this.communication_element);
                },

//todo> review this method. it seems wrong
                itextChildInserted : function(event) {
                        this.editor.set_SRT(event.target.data);
                },


/*
This addon uses XMLHttpRequest to fetch and save content to a subtitles (wiki) repository. 

Gavin Sharp gave me this advice:

Cross-site XMLHttpRequest *in chrome code* works in extensions, but since you're actually
 extending a content-hosted video control, you're not able to take advantage of it (the security
 policies of the video-hosting website are in effect).

To work around the issue, you could have your binding generate a custom event when it wants
 to retrieve data, and have a chrome-hosted listener watch for that event and take care of the
 request. See https://developer.mozilla.org/en/Code_snippets/Interaction_between_privileged_and_non-privileged_pages
 for an example.
*/
                emit_event : function (eventName, node){
                  var evt = document.createEvent("Events");
                  evt.initEvent(eventName, true, false);
                  node.dispatchEvent(evt);
                },

                videoChildInserted : function(event) {
                    //I am trying to implement behaviour proposed by Silvia Pfeiffer
                    //You can test it on http://bighead.poli.usp.br/~juca/teste/teste.html

                    //This could be soon updated to support this second version of her spec: 
                    //http://blog.gingertech.net/2009/10/06/new-proposal-for-captions-and-other-timed-text-for-html5/

                    if (event.target.tagName == "itext"){
                        this.addSubtitle({"title": event.target.id,
                          "lang": event.target.getAttribute("lang"),
                           "url": event.target.getAttribute("src"),
                            "itext_node": event.target });

                        this.subtitlesButton.setAttribute("hidden", "false");
                    }
                }

            }) ]]>
        </field>

  			<method name="set_editor">
          <parameter name="subtitles_editor" />
				  <body>
	        <![CDATA[
            this.subtitlesMenuUtils.editor = subtitles_editor;
	        ]]>
				  </body>
        </method>

        <constructor>
            <![CDATA[
                this.subtitlesMenuUtils.init(this);
            ]]>
        </constructor>
    </implementation>

  </binding>


  <binding id="subtitleseditor">
    <content>
      <xul:vbox flex="1">
        <xul:hbox class="subtitle_editor_hbox" hidden="true">
          <xul:vbox class="subtitle_interval_vbox" flex="1">
            <xul:scale movetoclick="true" class="subtitle_interval_scale left_arrow" />
            <xul:scale movetoclick="true" class="subtitle_interval_scale right_arrow" />
          </xul:vbox>
          <xul:button label="Save" class="plain wikisubs_button save_button" />
          <xul:button label="Cancel" class="plain wikisubs_button cancel_button" />
        </xul:hbox>
        <xul:textbox class="plain subtitles_textbox" multiline="true" spellcheck="false" />
      </xul:vbox>
    </content>

      <implementation>
        <field name="editorUtils">
            <![CDATA[ ({
                edit_mode : false,
                video : null,
                subtitlesMenu : null,
                button : null,
                current_subtitle : null,
                loading_subtitles : false,
                edit_mode : false,

                /* SRT (subtitles file format) parsing and encoding routines: */

                toMilliSeconds: function (s){
                  var timeparts = s.split(',');
                  msecs = Number(timeparts[1]);
                  var timeparts = timeparts[0].split(':');
                  var hours = Number(timeparts[0]);
                  var mins = Number(timeparts[1]);
                  var secs = Number(timeparts[2]);

                  return (((hours*60 + mins) * 60) + secs)*1000 + msecs;
                },

                MilliSecondsToString: function(time){
                  var timeString;
                  var hours = Math.floor(time / 3600000);
                  var mins  = Math.floor(time % 3600000 / 60000);
                  var secs  = Math.floor(time % 60000 / 1000);
                  var msecs = time%1000;
                  if (secs < 10) secs = "0" + secs;
                  if (mins < 10) mins = "0" + mins;
                  if (hours < 10) hours = "0" + hours;
                  if (msecs < 10) msecs = "0" + msecs;
                  if (msecs < 100) msecs = "0" + msecs;
                  return hours + ":" + mins + ":" + secs + "," + msecs;
                },

                parse_SRT : function (text){
                  var blocks = text.split("\n\n");
                  var content = [];
                  for (var i=0; i<blocks.length; i++){
                    var block = blocks[i].split("\n");
                    //block[0] is the index. I'll ignore it. Could be used to check validity of the SRT
                    var timeinterval = block[1].split(' --> ');
                    var start = this.toMilliSeconds(timeinterval[0]);
                    var end = this.toMilliSeconds(timeinterval[1]);
                    content.push({'start':start, 'end':end, 'text':block[2]});
                  }
                  return content;
                },

                encode_SRT : function (sub){
                  text = ""
                  for (i in sub){
                      text+=(Number(i)+1)+"\n"
                      text+=this.MilliSecondsToString(sub[i]["start"])
                      text+=" --> "
                      text+=this.MilliSecondsToString(sub[i]["end"])+"\n";
                      text+=sub[i]["text"]+"\n\n";
                  }
                  return text;
                },

//This is a test. I plan to have an annotation overlay to be rendered
// using SVG on top of the video.
// You can see a demo of the balloon XBL at this page:
// http://www.wstr.org/xbl_example/ann_example.xul

//TODO: check whether it is a good thing. Otherwise, remove it.
                addBalloon : function(x,y,w,h,px,py, text){
                    var balloon = document.createElement("annotation");
                    balloon.setAttribute("id", "myballoon");
                    this.annotations_overlay.appendChild(balloon);

                    //For some reason I had to explicitely add the binding to each new balloon:
                    document.addBinding(balloon, "chrome://global/content/annotations.xml#annotation");
 
                    update_balloon = function(evt){

                    var x = evt.clientX;
                    var y = evt.clientY;

                      balloon.setDimensions(20,70,50,40);
                      balloon.setPointer(x, y);
                      balloon.setText("X:"+x +" Y:"+ y);
                    }

                  window.onmousemove = update_balloon;
                },

                enter_edit_mode : function(event){
                    this.edit_mode = true;
                    this.original_text = this.subtitles_textbox.value;
                    this.original_star = this.interval_start.value;
                    this.original_end = this.interval_end.value;

                    this.video.pause();
                    this.subtitles_textbox.style.background = "rgba(255,255,128, 0.3)"
                    this.editor_hbox.setAttribute("hidden", "false");
                    this.set_subtitle_sliders_limits();
                },

                exit_edit_mode : function(resume) {
                    this.edit_mode=false;
                    this.subtitles_textbox.style.background = "transparent"
                    this.editor_hbox.setAttribute("hidden", "true");
                    if (resume) this.video.play();
                },

                saveSubs : function(){
                  //ignore save if current sub is not altered
                  //(we save immediatly after user edits so only the current sub mathers)
                  if (this.subtitles_textbox.value == this.original_text &&
                      this.interval_start.value == this.original_start &&
                      this.interval_end.value == this.original_end) return;

                  if (this.current_subtitle_index == -1){
                    this.current_subtitle["content"].push(
                        {"text": this.subtitles_textbox.value,
                         "start": this.interval_start.value,
                         "end": this.interval_end.value});
                  } else {
                    this.current_subtitle["content"][this.current_subtitle_index]["text"] = this.subtitles_textbox.value;
                    this.current_subtitle["content"][this.current_subtitle_index]["start"] = this.interval_start.value;
                    this.current_subtitle["content"][this.current_subtitle_index]["end"] = this.interval_end.value;
                  }

                  //remove this subtitle chunk if user has deleted all text in the textbox
                  if (this.subtitles_textbox.value==""){
                    this.current_subtitle["content"].splice(this.current_subtitle_index, 1);
                  }

                  //This may seem complicated, but I am doing it in order to
                  // keep itext attributes compliant to Silvia's spec: 
                  var pagename = this.current_subtitle["url"].split("title=")[1];

                  var srt = this.encode_SRT(this.current_subtitle["content"]);
                  this.communication_element.setAttribute("pagename", pagename);
                  this.communication_element.setAttribute("srt", srt);
                  this.emit_event("WikiSubsSaveSub", this.communication_element);
                },

/*
Justin Dolske gave me this advice (but I havent implemented it yet):

This is terribly inefficient. The timeupdate event is dispatched every frame,
so running code in each event should be avoided as much as possible. Your
displaySubtitles() is also very inefficient, as it does a linear search though
the subtitles each time (!) it's called.

I'd suggest doing something like caching the min/max time for the current
subtitle, and bailing out early if .currentTime is between those two values
(because you then know the current subtitle doesn't need changed).
*/
                displaySubtitles : function(){
                  var currentTime = Math.round(this.video.currentTime * 1000); // in ms
                  if (this.loading_subtitles == true) {
                  //TODO: l10n
                    this.subtitles_textbox.value = "Loading subtitles...";
                    return;
                  }

                  if (this.current_subtitle == null) return;

                  var text = "";
                  this.current_subtitle_index = -1;
                  var subs = this.current_subtitle["content"];
                  for (i=0; i < subs.length; i++){
                    if ((currentTime >= subs[i].start) && (currentTime < subs[i].end)){
                      text = subs[i]["text"];
                      this.current_subtitle_index = i;
                      break;
                    }
                  }
                  this.subtitles_textbox.value = text;

                  if (this.current_subtitle_index == -1){
                    //user is addind a new chunk of subtitle text.
                    //So preset the time interval to the previous past 3 seconds
                    this.set_subtitle_sliders(currentTime - 3000, currentTime);
                  } else {
                    this.set_subtitle_sliders(subs[i]["start"], subs[i]["end"]);
                  }
                },

                set_subtitle_sliders : function(start, end){
                  this.interval_start.setAttribute("value", start);
                  this.interval_end.setAttribute("value", end);
                },

                set_subtitle_sliders_limits : function(){
                  var now = Math.round(this.video.currentTime * 1000);
                  this.interval_start.setAttribute("min", now - 3000);
                  this.interval_start.setAttribute("max", now + 3000);
                  this.interval_end.setAttribute("min", now - 3000);
                  this.interval_end.setAttribute("max", now + 3000);
                },

//TODO: duplicated method. MUST refactor!
                emit_event : function (eventName, node){
                  var evt = document.createEvent("Events");
                  evt.initEvent(eventName, true, false);
                  node.dispatchEvent(evt);
                },

              init : function(binding){
                    self = this;
                    //TODO: make it cleaner:
                    this.video = binding.parentNode.parentNode.parentNode.parentNode;
//TODO: there are 2 WikiSubsCommunicationElement elements!
                    this.communication_element = document.createElement("WikiSubsCommunicationElement");
                    this.video.appendChild(this.communication_element);

                    this.video.addEventListener("timeupdate", function() { self.displaySubtitles(); }, false);

                    var save_button = document.getAnonymousElementByAttribute(binding, "class", "plain wikisubs_button save_button");
                    var cancel_button = document.getAnonymousElementByAttribute(binding, "class", "plain wikisubs_button cancel_button");
                    this.subtitles_textbox = document.getAnonymousElementByAttribute(binding, "class", "plain subtitles_textbox");
                    this.subtitlesMenu = document.getAnonymousElementByAttribute(binding, "class", "subtitlesMenu");
                    this.interval_start = document.getAnonymousElementByAttribute(binding, "class", "subtitle_interval_scale left_arrow");
                    this.interval_end = document.getAnonymousElementByAttribute(binding, "class", "subtitle_interval_scale right_arrow");
                    this.editor_hbox = document.getAnonymousElementByAttribute(binding, "class", "subtitle_editor_hbox");

                    save_button.addEventListener("click", function(){ self.saveSubs(); self.exit_edit_mode(true); } , false);
                    cancel_button.addEventListener("click", function(){ self.exit_edit_mode(true) } , false);
                    this.subtitles_textbox.addEventListener("click", function(event){ self.enter_edit_mode(); }, false);
                    this.exit_edit_mode(false);                
              }

            }) ]]>
        </field>

        <method name="fetch">
          <parameter name="sub" />
          <parameter name="node" />
            <body>
                  if (!node) node = this.communication_element;
                  this.editorUtils.loading_subtitles = true;
                  sub["content"] = [];
                  this.editorUtils.current_subtitle = sub
                  this.editorUtils.communication_element.setAttribute("src", sub["url"]); 
                  this.editorUtils.emit_event("WikiSubsLoadSub", node);
            </body>
        </method>

        <method name="set_SRT">
          <parameter name="content" />
            <body>
              this.editorUtils.current_subtitle["content"] = this.editorUtils.parse_SRT(content);
              this.editorUtils.loading_subtitles = false;
            </body>
        </method>

        <constructor>
            <![CDATA[
                this.editorUtils.init(this);
            ]]>
        </constructor>
    </implementation>
  </binding>

  <binding id="wikisubs"
               extends="chrome://global/content/bindings/videocontrols.xml#videoControls">
      <implementation>
        <field name="wikisubsUtils">
            <![CDATA[ ({

                init : function (binding) {
                    dump("\n--------- wikisubs constructor ---------\n\n");
                    var self = this;
                    var xulns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                    this.video = binding.parentNode;

                    //Subtitles will be displayed above the controls:
                    var subtitles_editor = document.createElementNS(xulns, "subtitleseditor");
                    var controlBar = document.getAnonymousElementByAttribute(binding, "class", "controlBar");
                    controlBar.parentNode.insertBefore(subtitles_editor, controlBar);
                    subtitles_editor.setAttribute("style", '-moz-binding:url("chrome://global/content/wikisubs.xml#subtitleseditor");');

                    //Subtitles menu will be near the mute button:
                    this.subtitlesmenu =  document.createElementNS(xulns, "subtitlesmenu");
                    this.subtitlesmenu.setAttribute("style", '-moz-binding:url("chrome://global/content/wikisubs.xml#subtitlesmenu");');
                    var muteButton = document.getAnonymousElementByAttribute(binding, "class", "muteButton");
                    muteButton.parentNode.insertBefore(this.subtitlesmenu, muteButton);
                    this.subtitlesmenu.set_editor(subtitles_editor);
/* Temporarily disabled. Experimental feature.
            //setup annotations overlay:
                    statusOverlay = document.getAnonymousElementByAttribute(binding, "class", "statusOverlay");
                    this.annotations_overlay = document.createElementNS(xulns, "stack");
                    this.annotations_overlay.setAttribute("flex", "1");
                    statusOverlay.parentNode.insertBefore(this.annotations_overlay, statusOverlay);

                    this.addBalloon(0,0,10,10,20,30,"testing");
*/

                    //This is a hack. we need a way to inhibit video controls handling of keypress
                    // events when we are typing text in the subtitles textbox, so that for instance
                    // typing a spacebar won't trigger togglePause
                    binding.Utils.original_keyHandler = binding.Utils.keyHandler;
                    binding.Utils.keyHandler = function(event){
                      if (self.edit_mode==false)
                        binding.Utils.original_keyHandler(event);
                    };

                    var playButton = document.getAnonymousElementByAttribute(binding, "class", "playButton");
                    playButton.addEventListener("click", function(){ if (self.edit_mode) self.exit_edit_mode(false); }, false);

                    dump("--- wikisubs initialized ---\n");
                }

            }) ]]>
        </field>

        <constructor>
            <![CDATA[
                this.wikisubsUtils.init(this);
            ]]>
        </constructor>
      </implementation>

      <resources>
        <stylesheet src="chrome://wikisubs/skin/wikisubs.css"/>
      </resources>
  </binding>

</bindings>

