<?xml version="1.0"?>

<bindings id="wikisubsBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:xbl="http://www.mozilla.org/xbl"
	 xmlns:svg="http://www.w3.org/2000/svg" 
   xmlns:html="http://www.w3.org/1999/xhtml" 
>

  <binding id="wikisubs" extends="chrome://global/content/bindings/videocontrols.xml#videoControls">
      <implementation>
        <field name="wikisubsUtils">
            <![CDATA[ ({
                video : null,
                subtitlesMenu : null,
                button : null,
                current_subtitle : null,
                loading_subtitles : false,
                edit_mode : false,

                toMilliSeconds: function (s){
                  var timeparts = s.split(',');
                  msecs = Number(timeparts[1]);
                  var timeparts = timeparts[0].split(':');
                  var hours = Number(timeparts[0]);
                  var mins = Number(timeparts[1]);
                  var secs = Number(timeparts[2]);

                  return (((hours*60 + mins) * 60) + secs)*1000 + msecs;
                },

                MilliSecondsToString: function(time){
                  var timeString;
                  var hours = Math.floor(time / 3600000);
                  var mins  = Math.floor(time % 3600000 / 60000);
                  var secs  = Math.floor(time % 60000 / 1000);
                  var msecs = time%1000;
                  if (secs < 10) secs = "0" + secs;
                  if (mins < 10) mins = "0" + mins;
                  if (hours < 10) hours = "0" + hours;
                  if (msecs < 10) msecs = "0" + msecs;
                  if (msecs < 100) msecs = "0" + msecs;
                  return hours + ":" + mins + ":" + secs + "," + msecs;
                },

                parse_SRT : function (text){
                  var blocks = text.split("\n\n");
                  var content = [];
                  for (var i=0; i<blocks.length; i++){
                    var block = blocks[i].split("\n");
                    //block[0] is the index. I'll ignore it. Could be used to check validity of the SRT
                    var timeinterval = block[1].split(' --> ');
                    var start = this.toMilliSeconds(timeinterval[0]);
                    var end = this.toMilliSeconds(timeinterval[1]);
                    content.push({'start':start, 'end':end, 'text':block[2]});
                  }
                  return content;
                },

                encode_SRT : function (sub){
                  text = ""
                  for (i in sub){
                      text+=i+"\n"
                      text+=this.MilliSecondsToString(sub[i]["start"])+" --> "+this.MilliSecondsToString(sub[i]["end"])+"\n";
                      text+=sub[i]["text"]+"\n\n";
                  }
                  return text;
                },

                emit_event : function (eventName, node){
                  var evt = document.createEvent("Events");
                  evt.initEvent(eventName, true, false);
                  node.dispatchEvent(evt);
                },

                fetch : function (sub, node){
                  if (!node) node = this.ajax_element;
                  this.loading_subtitles = true;
                  sub["content"] = [];
                  this.current_subtitle = sub
                  this.ajax_element.setAttribute("src", sub["url"]); 
                  this.emit_event("WikiSubsLoadSub", node);
                },

                addMenuLink : function (title, url){
                    var self=this;
                    var xulns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                    var item = document.createElementNS(xulns, "menuitem");
                    item.setAttribute("label", title);
                    item.addEventListener("click", function(e) {
                        self.ajax_element.setAttribute("url", url); 
                        self.emit_event("WikiSubsOpenTab", self.ajax_element);
                    }, false);
                    this.subtitlesMenu.appendChild(item);
                },

                addSubtitle : function (sub){
                    var xulns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                    var item = document.createElementNS(xulns, "menuitem");
                    item.setAttribute("label", sub["title"]);
                    var self = this;

                    sub["itext_node"].addEventListener("DOMNodeInserted", function(event) { self.itextChildInserted(event); }, false);
                    item.addEventListener("click", function(e) {self.fetch(sub, sub["itext_node"]);}, false);
                    this.subtitlesMenu.appendChild(item);
                    this.subtitlesButton.setAttribute("hidden", "false");
                },

                displaySubtitles : function(){
                  var currentTime = Math.round(this.video.currentTime * 1000); // in ms
                  if (this.loading_subtitles == true) {
                  //TODO: l10n
                    this.subtitles_editbox.value = "Loading subtitles...";
                    return;
                  }

                  if (this.current_subtitle == null) return;

                  var text = "";
                  var subs = this.current_subtitle["content"];
                  for (i=0; i < subs.length; i++){
                    if ((currentTime >= subs[i].start) && (currentTime < subs[i].end)){
                      text = subs[i]["text"];
                      this.current_subtitle_index = i;
                      break;
                    }
                  }
                  this.subtitles_editbox.value = text;
                },

                look_for_available_subtitles : function(){
                    this.emit_event("WikiSubsLoadSubList", this.ajax_element);  
                },

//This is a test
//TODO: check whether it is a good thing. Otherwise, remove it.
                addBalloon : function(x,y,w,h,px,py, text){
                    var balloon = document.createElement("annotation");
                    balloon.setAttribute("id", "myballoon");
                    //this.annotations_overlay.appendChild(balloon);
                    document.addBinding(balloon, "chrome://global/content/annotations.xml#annotation");
 
                    update_balloon = function(evt){

                    var x = evt.clientX;
                    var y = evt.clientY;

                      balloon.setDimensions(20,70,50,40);
                      balloon.setPointer(x, y);
                      balloon.setText("X:"+x +" Y:"+ y);
                    }

                  window.onmousemove = update_balloon;
                },

                init : function (binding) {
                    dump("\n--------- wikisubs constructor ---------\n\n");

                    this.video = binding.parentNode;

                    this.ajax_element = document.createElement("WikiSubsAjaxElement");
                    this.video.appendChild(this.ajax_element);

                    // XBL doesn't have a good way to inject content into the middle of
                    // something else, so we'll insert our content via DOM manipulation.
                    var xulns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                    this.subtitlesButton = document.createElementNS(xulns, "button");
                    this.subtitlesButton.setAttribute("class", "subtitlesButton");
                    this.subtitlesButton.setAttribute("type", "menu");

                    this.subtitlesMenu = document.createElementNS(xulns, "menupopup");
                    this.subtitlesButton.appendChild(this.subtitlesMenu);
                    this.subtitlesButton.setAttribute("type", "menu");
                    this.subtitlesButton.setAttribute("position", "before_end");
                    this.subtitlesButton.setAttribute("dir", "reverse");

                    subtitlesHbox = document.createElementNS(xulns, "hbox");

                    var self = this;

                    this.subtitles_editbox = document.createElementNS(xulns, "textbox");
                    
                    this.subtitles_editbox.addEventListener("click", function(event){ self.enter_edit_mode(); }, false);
                    this.subtitles_editbox.setAttribute("class", "plain subtitles_editbox");
                    this.subtitles_editbox.setAttribute("multiline", "true");
                    this.subtitles_editbox.setAttribute("flex", "1");

//TODO:
                    this.subtitles_editbox.addEventListener("change", function(){ self.saveSubs() } , false);


//MDC states:    spellcheck   New in Firefox 2.0.0.2
//                      Type: boolean 
//                      "If true, spell checking is enabled by default for the text box; if false, spell checking is disabled by default."
//                      "If not specified, this defaults to false "

//but it seems to be true by default...
//                    this.subtitles_editbox.spellcheck=false;

                    subtitlesHbox.setAttribute("class", "subsContainer");
                    subtitlesHbox.appendChild(this.subtitles_editbox);

                    var controlBar = document.getAnonymousElementByAttribute(binding, "class", "controlBar");

                    //Add label where the subtitle will be displayed:
                    controlBar.parentNode.insertBefore(subtitlesHbox, controlBar);

                    //Add subs button:
                    var muteButton = document.getAnonymousElementByAttribute(binding, "class", "muteButton");
                    muteButton.parentNode.insertBefore(this.subtitlesButton, muteButton);

                    //button is initially hidden while we dont have a list of available subs:
                    this.subtitlesButton.setAttribute("hidden", "true");

//setup annotations overlay:
                    statusOverlay = document.getAnonymousElementByAttribute(binding, "class", "statusOverlay");
                    this.annotations_overlay = document.createElementNS(xulns, "stack");
                    this.annotations_overlay.setAttribute("flex", "1");
                    statusOverlay.parentNode.insertBefore(this.annotations_overlay, statusOverlay);

                    this.addBalloon(0,0,10,10,20,30,"testing");

                    var self = this;
                    self.video.addEventListener("DOMNodeInserted", function(event) { self.videoChildInserted(event); }, false);
                    self.video.addEventListener("timeupdate", function() { self.displaySubtitles(); }, false);

                    self.addMenuLink("Subtitles wiki page...", "http://www.wstr.org/subs/");

//TODO: Why?!
                    //self.video.addEventListener("load", function(){ alert("self.video.src: "+self.video.src); self.look_for_available_subtitles(); }, false);
                    window.setInterval ( function(){ self.look_for_available_subtitles(); } );

                    //This is a hack. we need a way to inhibit video controls handling of keypress
                    // events when we are typing text in the subtitles textbox, so that for instance
                    // typing a spacebar won't trigger togglePause
                    binding.Utils.original_keyHandler = binding.Utils.keyHandler;
                    binding.Utils.keyHandler = function(event){
                      if (self.edit_mode==false)
                        binding.Utils.original_keyHandler(event);
                    };

                    dump("--- wikisubs initialized ---\n");
                },

                itextChildInserted : function(event) {
                        this.current_subtitle["content"] = this.parse_SRT(event.target.data);
                        this.loading_subtitles = false;
                },

                videoChildInserted : function(event) {
                    //this is an experiment. I am trying to implement behaviour proposed by Silvia Pfeiffer
                    //You can test it on http://bighead.poli.usp.br/~juca/teste/teste.html

                    if (event.target.tagName == "itext"){
                        this.addSubtitle({"title": event.target.id,
                          "lang": event.target.getAttribute("lang"),
                           "url": event.target.getAttribute("src"),
                            "itext_node": event.target });

                        this.subtitlesButton.setAttribute("hidden", "false");
                    }
                },

                enter_edit_mode : function(event){
                    this.edit_mode = true;
                    this.original_text = this.subtitles_editbox.value;
                    this.video.pause();
                },

                exit_edit_mode : function() {
                    this.edit_mode=false;
                },

                saveSubs : function(){
                  if (this.subtitles_editbox.value == this.original_text) return;
                  this.current_subtitle["content"][this.current_subtitle_index]["text"] = this.subtitles_editbox.value;

                  //This may seem complicated, but I am doing it in order to
                  // keep itext attributes compliant to Silvia's spec: 
                  var pagename = this.current_subtitle["url"].split("title=")[1];

                  var srt = this.encode_SRT(this.current_subtitle["content"]);
                  this.ajax_element.setAttribute("pagename", pagename);
                  this.ajax_element.setAttribute("srt", srt);
                  this.emit_event("WikiSubsSaveSub", this.ajax_element);
                }

            }) ]]>
        </field>

        <constructor>
            <![CDATA[
                this.wikisubsUtils.init(this);
            ]]>
        </constructor>
      </implementation>

      <resources>
        <stylesheet src="chrome://wikisubs/skin/wikisubs.css"/>
      </resources>
  </binding>

</bindings>

